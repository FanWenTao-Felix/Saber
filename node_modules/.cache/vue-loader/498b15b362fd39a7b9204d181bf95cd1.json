{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\page\\index\\top\\top-search.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\page\\index\\top\\top-search.vue","mtime":1592365966725},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport config from \"../sidebar/config.js\";\nimport {mapGetters} from \"vuex\";\n\nexport default {\n  data() {\n    return {\n      config: config,\n      value: \"\",\n      menuList: []\n    };\n  },\n  created() {\n    this.getMenuList();\n  },\n\n  watch: {\n    menu() {\n      this.getMenuList();\n    }\n  },\n  computed: {\n    labelKey() {\n      return this.website.menu.props.label || this.config.propsDefault.label;\n    },\n    pathKey() {\n      return this.website.menu.props.path || this.config.propsDefault.path;\n    },\n    iconKey() {\n      return this.website.menu.props.icon || this.config.propsDefault.icon;\n    },\n    childrenKey() {\n      return (\n        this.website.menu.props.children || this.config.propsDefault.children\n      );\n    },\n    ...mapGetters([\"menu\", \"website\"])\n  },\n  methods: {\n    getMenuList() {\n      const findMenu = list => {\n        for (let i = 0; i < list.length; i++) {\n          const ele = Object.assign({}, list[i]);\n          if (this.validatenull(ele[this.childrenKey])) {\n            this.menuList.push(ele);\n          } else {\n            findMenu(ele[this.childrenKey]);\n          }\n        }\n      };\n      this.menuList = [];\n      findMenu(this.menu);\n    },\n    querySearch(queryString, cb) {\n      var restaurants = this.menuList;\n      var results = queryString\n        ? restaurants.filter(this.createFilter(queryString))\n        : restaurants;\n      // 调用 callback 返回建议列表的数据\n      cb(results);\n    },\n    createFilter(queryString) {\n      return restaurant => {\n        return (\n          restaurant.name.toLowerCase().indexOf(queryString.toLowerCase()) ===\n          0\n        );\n      };\n    },\n    handleSelect(item) {\n      this.value = \"\";\n      this.$router.push({\n        path: this.$router.$avueRouter.getPath({\n          name: item[this.labelKey],\n          src: item[this.pathKey]\n        }, item.meta),\n        query: item.query\n      });\n    }\n  }\n};\n",{"version":3,"sources":["top-search.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"top-search.vue","sourceRoot":"src/page/index/top","sourcesContent":["<template>\r\n  <el-autocomplete class=\"top-search\"\r\n                   popper-class=\"my-autocomplete\"\r\n                   v-model=\"value\"\r\n                   :fetch-suggestions=\"querySearch\"\r\n                   :placeholder=\"$t('search')\"\r\n                   @select=\"handleSelect\">\r\n\r\n    <template slot-scope=\"{ item }\">\r\n      <i :class=\"[item[iconKey],'icon']\"></i>\r\n      <div class=\"name\">{{ item[labelKey] }}</div>\r\n      <div class=\"addr\">{{ item[pathKey] }}</div>\r\n    </template>\r\n  </el-autocomplete>\r\n</template>\r\n\r\n<script>\r\n  import config from \"../sidebar/config.js\";\r\n  import {mapGetters} from \"vuex\";\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        config: config,\r\n        value: \"\",\r\n        menuList: []\r\n      };\r\n    },\r\n    created() {\r\n      this.getMenuList();\r\n    },\r\n\r\n    watch: {\r\n      menu() {\r\n        this.getMenuList();\r\n      }\r\n    },\r\n    computed: {\r\n      labelKey() {\r\n        return this.website.menu.props.label || this.config.propsDefault.label;\r\n      },\r\n      pathKey() {\r\n        return this.website.menu.props.path || this.config.propsDefault.path;\r\n      },\r\n      iconKey() {\r\n        return this.website.menu.props.icon || this.config.propsDefault.icon;\r\n      },\r\n      childrenKey() {\r\n        return (\r\n          this.website.menu.props.children || this.config.propsDefault.children\r\n        );\r\n      },\r\n      ...mapGetters([\"menu\", \"website\"])\r\n    },\r\n    methods: {\r\n      getMenuList() {\r\n        const findMenu = list => {\r\n          for (let i = 0; i < list.length; i++) {\r\n            const ele = Object.assign({}, list[i]);\r\n            if (this.validatenull(ele[this.childrenKey])) {\r\n              this.menuList.push(ele);\r\n            } else {\r\n              findMenu(ele[this.childrenKey]);\r\n            }\r\n          }\r\n        };\r\n        this.menuList = [];\r\n        findMenu(this.menu);\r\n      },\r\n      querySearch(queryString, cb) {\r\n        var restaurants = this.menuList;\r\n        var results = queryString\r\n          ? restaurants.filter(this.createFilter(queryString))\r\n          : restaurants;\r\n        // 调用 callback 返回建议列表的数据\r\n        cb(results);\r\n      },\r\n      createFilter(queryString) {\r\n        return restaurant => {\r\n          return (\r\n            restaurant.name.toLowerCase().indexOf(queryString.toLowerCase()) ===\r\n            0\r\n          );\r\n        };\r\n      },\r\n      handleSelect(item) {\r\n        this.value = \"\";\r\n        this.$router.push({\r\n          path: this.$router.$avueRouter.getPath({\r\n            name: item[this.labelKey],\r\n            src: item[this.pathKey]\r\n          }, item.meta),\r\n          query: item.query\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  .my-autocomplete {\r\n    li {\r\n      line-height: normal;\r\n      padding: 7px;\r\n\r\n      .icon {\r\n        margin-right: 5px;\r\n        display: inline-block;\r\n        vertical-align: middle;\r\n      }\r\n\r\n      .name {\r\n        display: inline-block;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        vertical-align: middle;\r\n      }\r\n\r\n      .addr {\r\n        padding-top: 5px;\r\n        width: 100%;\r\n        font-size: 12px;\r\n        color: #b4b4b4;\r\n      }\r\n\r\n      .highlighted .addr {\r\n        color: #ddd;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n"]}]}