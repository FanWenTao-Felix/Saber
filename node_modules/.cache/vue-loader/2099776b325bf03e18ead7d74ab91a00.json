{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\views\\work\\done.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\views\\work\\done.vue","mtime":1592365966780},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.none-border {\n  border: 0;\n  background-color: transparent !important;\n}\n",{"version":3,"sources":["done.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0MA;AACA;AACA;AACA","file":"done.vue","sourceRoot":"src/views/work","sourcesContent":["<template>\r\n  <basic-container>\r\n    <avue-crud :option=\"option\"\r\n               :table-loading=\"loading\"\r\n               :data=\"data\"\r\n               ref=\"crud\"\r\n               v-model=\"form\"\r\n               :page=\"page\"\r\n               @search-change=\"searchChange\"\r\n               @search-reset=\"searchReset\"\r\n               @selection-change=\"selectionChange\"\r\n               @current-change=\"currentChange\"\r\n               @size-change=\"sizeChange\"\r\n               @refresh-change=\"refreshChange\"\r\n               @on-load=\"onLoad\">\r\n      <template slot-scope=\"scope\" slot=\"menu\">\r\n        <el-button type=\"text\"\r\n                   size=\"small\"\r\n                   v-if=\"permission.work_done_detail\"\r\n                   plain\r\n                   class=\"none-border\"\r\n                   @click.stop=\"handleDetail(scope.row)\">详情\r\n        </el-button>\r\n        <el-button type=\"text\"\r\n                   size=\"small\"\r\n                   v-if=\"permission.work_done_follow\"\r\n                   plain\r\n                   class=\"none-border\"\r\n                   @click.stop=\"handleImage(scope.row,scope.index)\">跟踪\r\n        </el-button>\r\n      </template>\r\n      <template slot-scope=\"{row}\"\r\n                slot=\"processDefinitionVersion\">\r\n        <el-tag>v{{row.processDefinitionVersion}}</el-tag>\r\n      </template>\r\n    </avue-crud>\r\n    <el-dialog title=\"流程图\"\r\n               append-to-body\r\n               :visible.sync=\"flowBox\"\r\n               :fullscreen=\"true\">\r\n      <iframe\r\n        :src=flowUrl\r\n        width=\"100%\"\r\n        height=\"700\"\r\n        title=\"流程图\"\r\n        frameBorder=\"no\"\r\n        border=\"0\"\r\n        marginWidth=\"0\"\r\n        marginHeight=\"0\"\r\n        scrolling=\"no\"\r\n        allowTransparency=\"yes\">\r\n      </iframe>\r\n      <span slot=\"footer\"\r\n            class=\"dialog-footer\">\r\n        <el-button @click=\"flowBox = false\">关 闭</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </basic-container>\r\n</template>\r\n\r\n<script>\r\n  import {mapGetters} from \"vuex\";\r\n  import {doneList} from \"@/api/work/work\";\r\n  import {flowCategory, flowRoute} from \"@/util/flow\";\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {},\r\n        selectionId: '',\r\n        selectionList: [],\r\n        query: {},\r\n        loading: true,\r\n        page: {\r\n          pageSize: 10,\r\n          currentPage: 1,\r\n          total: 0\r\n        },\r\n        flowBox: false,\r\n        flowUrl: '',\r\n        workBox: false,\r\n        option: {\r\n          height: 'auto',\r\n          calcHeight: 30,\r\n          tip: false,\r\n          searchShow: true,\r\n          searchMenuSpan: 6,\r\n          border: true,\r\n          index: true,\r\n          selection: true,\r\n          editBtn: false,\r\n          addBtn: false,\r\n          viewBtn: false,\r\n          delBtn: false,\r\n          dialogWidth: 900,\r\n          menuWidth: 150,\r\n          dialogClickModal: false,\r\n          column: [\r\n            {\r\n              label: \"流程分类\",\r\n              type: \"select\",\r\n              row: true,\r\n              dicUrl: \"/api/blade-system/dict/dictionary?code=flow\",\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              dataType: \"number\",\r\n              slot: true,\r\n              prop: \"category\",\r\n              search: true,\r\n              hide: true,\r\n              width: 100,\r\n            },\r\n            {\r\n              label: '流程名称',\r\n              prop: 'processDefinitionName',\r\n              search: true,\r\n            },\r\n            {\r\n              label: '当前步骤',\r\n              prop: 'taskName',\r\n            },\r\n            {\r\n              label: '流程版本',\r\n              prop: 'processDefinitionVersion',\r\n              slot: true,\r\n              width: 80,\r\n            },\r\n            {\r\n              label: '申请时间',\r\n              prop: 'createTime',\r\n              width: 165,\r\n            },\r\n          ]\r\n        },\r\n        data: []\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters([\"permission\", \"flowRoutes\"]),\r\n      ids() {\r\n        let ids = [];\r\n        this.selectionList.forEach(ele => {\r\n          ids.push(ele.id);\r\n        });\r\n        return ids.join(\",\");\r\n      },\r\n    },\r\n    methods: {\r\n      searchReset() {\r\n        this.query = {};\r\n        this.onLoad(this.page);\r\n      },\r\n      searchChange(params, done) {\r\n        this.query = params;\r\n        this.page.currentPage = 1;\r\n        this.onLoad(this.page, params);\r\n        done();\r\n      },\r\n      selectionChange(list) {\r\n        this.selectionList = list;\r\n      },\r\n      selectionClear() {\r\n        this.selectionList = [];\r\n        this.$refs.crud.toggleSelection();\r\n      },\r\n      handleDetail(row) {\r\n        this.$router.push({path: `/work/process/${flowRoute(this.flowRoutes, row.category)}/detail/${row.processInstanceId}/${row.businessId}`});\r\n      },\r\n      handleImage(row) {\r\n        this.flowUrl = `/api/blade-flow/process/diagram-view?processInstanceId=${row.processInstanceId}`;\r\n        this.flowBox = true;\r\n      },\r\n      currentChange(currentPage){\r\n        this.page.currentPage = currentPage;\r\n      },\r\n      sizeChange(pageSize){\r\n        this.page.pageSize = pageSize;\r\n      },\r\n      refreshChange() {\r\n        this.onLoad(this.page, this.query);\r\n      },\r\n      onLoad(page, params = {}) {\r\n        const query = {\r\n          ...this.query,\r\n          category: (params.category) ? flowCategory(params.category) : null\r\n        };\r\n        this.loading = true;\r\n        doneList(page.currentPage, page.pageSize, Object.assign(params, query)).then(res => {\r\n          const data = res.data.data;\r\n          this.page.total = data.total;\r\n          this.data = data.records;\r\n          this.loading = false;\r\n          this.selectionClear();\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .none-border {\r\n    border: 0;\r\n    background-color: transparent !important;\r\n  }\r\n</style>\r\n"]}]}