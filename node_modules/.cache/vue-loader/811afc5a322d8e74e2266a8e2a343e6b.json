{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\page\\index\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\page\\index\\index.vue","mtime":1592365966717},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapGetters} from \"vuex\";\nimport tags from \"./tags\";\nimport search from \"./search\";\nimport top from \"./top/\";\nimport sidebar from \"./sidebar/\";\nimport admin from \"@/util/admin\";\nimport {validatenull} from \"@/util/validate\";\nimport {calcDate} from \"@/util/date.js\";\nimport {getStore} from \"@/util/store.js\";\n\nexport default {\n  components: {\n    top,\n    tags,\n    search,\n    sidebar\n  },\n  name: \"index\",\n  provide() {\n    return {\n      index: this\n    };\n  },\n  data() {\n    return {\n      //搜索控制\n      isSearch: false,\n      //刷新token锁\n      refreshLock: false,\n      //刷新token的时间\n      refreshTime: \"\"\n    };\n  },\n  created() {\n    //实时检测刷新token\n    this.refreshToken();\n  },\n  mounted() {\n    this.init();\n  },\n  computed: mapGetters([\"isMenu\", \"isLock\", \"isCollapse\", \"website\", \"menu\"]),\n  props: [],\n  methods: {\n    showCollapse() {\n      this.$store.commit(\"SET_COLLAPSE\");\n    },\n    // 初始化\n    init() {\n      this.$store.commit(\"SET_SCREEN\", admin.getScreen());\n      window.onresize = () => {\n        setTimeout(() => {\n          this.$store.commit(\"SET_SCREEN\", admin.getScreen());\n        }, 0);\n      };\n      this.$store.dispatch(\"FlowRoutes\").then(() => {\n      });\n    },\n    //打开菜单\n    openMenu(item = {}) {\n      this.$store.dispatch(\"GetMenu\", item.id).then(data => {\n        if (data.length !== 0) {\n          this.$router.$avueRouter.formatRoutes(data, true);\n        }\n        //当点击顶部菜单后默认打开第一个菜单\n        /*if (!this.validatenull(item)) {\n          let itemActive = {},\n            childItemActive = 0;\n          if (item.path) {\n            itemActive = item;\n          } else {\n            if (this.menu[childItemActive].length === 0) {\n              itemActive = this.menu[childItemActive];\n            } else {\n              itemActive = this.menu[childItemActive].children[childItemActive];\n            }\n          }\n          this.$store.commit('SET_MENU_ID', item);\n          this.$router.push({\n            path: this.$router.$avueRouter.getPath({\n              name: (itemActive.label || itemActive.name),\n              src: itemActive.path\n            }, itemActive.meta)\n          });\n        }*/\n\n      });\n    },\n    // 定时检测token\n    refreshToken() {\n      this.refreshTime = setInterval(() => {\n        const token = getStore({\n          name: \"token\",\n          debug: true\n        }) || {};\n        const date = calcDate(token.datetime, new Date().getTime());\n        if (validatenull(date)) return;\n        if (date.seconds >= this.website.tokenTime && !this.refreshLock) {\n          this.refreshLock = true;\n          this.$store\n            .dispatch(\"refreshToken\")\n            .then(() => {\n              this.refreshLock = false;\n            })\n            .catch(() => {\n              this.refreshLock = false;\n            });\n        }\n      }, 10000);\n    }\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/page/index","sourcesContent":["<template>\r\n  <div class=\"avue-contail\" :class=\"{'avue--collapse':isCollapse}\">\r\n    <div class=\"avue-header\">\r\n      <!-- 顶部导航栏 -->\r\n      <top ref=\"top\"/>\r\n    </div>\r\n    <div class=\"avue-layout\">\r\n      <div class=\"avue-left\">\r\n        <!-- 左侧导航栏 -->\r\n        <sidebar/>\r\n      </div>\r\n      <div class=\"avue-main\">\r\n        <!-- 顶部标签卡 -->\r\n        <tags/>\r\n        <transition name=\"fade-scale\">\r\n          <search class=\"avue-view\" v-show=\"isSearch\"></search>\r\n        </transition>\r\n        <!-- 主体视图层 -->\r\n        <div style=\"height:100%;overflow-y:auto;overflow-x:hidden;\" id=\"avue-view\" v-show=\"!isSearch\">\r\n          <keep-alive>\r\n            <router-view class=\"avue-view\" v-if=\"$route.meta.$keepAlive\"/>\r\n          </keep-alive>\r\n          <router-view class=\"avue-view\" v-if=\"!$route.meta.$keepAlive\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"avue-shade\" @click=\"showCollapse\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import {mapGetters} from \"vuex\";\r\n  import tags from \"./tags\";\r\n  import search from \"./search\";\r\n  import top from \"./top/\";\r\n  import sidebar from \"./sidebar/\";\r\n  import admin from \"@/util/admin\";\r\n  import {validatenull} from \"@/util/validate\";\r\n  import {calcDate} from \"@/util/date.js\";\r\n  import {getStore} from \"@/util/store.js\";\r\n\r\n  export default {\r\n    components: {\r\n      top,\r\n      tags,\r\n      search,\r\n      sidebar\r\n    },\r\n    name: \"index\",\r\n    provide() {\r\n      return {\r\n        index: this\r\n      };\r\n    },\r\n    data() {\r\n      return {\r\n        //搜索控制\r\n        isSearch: false,\r\n        //刷新token锁\r\n        refreshLock: false,\r\n        //刷新token的时间\r\n        refreshTime: \"\"\r\n      };\r\n    },\r\n    created() {\r\n      //实时检测刷新token\r\n      this.refreshToken();\r\n    },\r\n    mounted() {\r\n      this.init();\r\n    },\r\n    computed: mapGetters([\"isMenu\", \"isLock\", \"isCollapse\", \"website\", \"menu\"]),\r\n    props: [],\r\n    methods: {\r\n      showCollapse() {\r\n        this.$store.commit(\"SET_COLLAPSE\");\r\n      },\r\n      // 初始化\r\n      init() {\r\n        this.$store.commit(\"SET_SCREEN\", admin.getScreen());\r\n        window.onresize = () => {\r\n          setTimeout(() => {\r\n            this.$store.commit(\"SET_SCREEN\", admin.getScreen());\r\n          }, 0);\r\n        };\r\n        this.$store.dispatch(\"FlowRoutes\").then(() => {\r\n        });\r\n      },\r\n      //打开菜单\r\n      openMenu(item = {}) {\r\n        this.$store.dispatch(\"GetMenu\", item.id).then(data => {\r\n          if (data.length !== 0) {\r\n            this.$router.$avueRouter.formatRoutes(data, true);\r\n          }\r\n          //当点击顶部菜单后默认打开第一个菜单\r\n          /*if (!this.validatenull(item)) {\r\n            let itemActive = {},\r\n              childItemActive = 0;\r\n            if (item.path) {\r\n              itemActive = item;\r\n            } else {\r\n              if (this.menu[childItemActive].length === 0) {\r\n                itemActive = this.menu[childItemActive];\r\n              } else {\r\n                itemActive = this.menu[childItemActive].children[childItemActive];\r\n              }\r\n            }\r\n            this.$store.commit('SET_MENU_ID', item);\r\n            this.$router.push({\r\n              path: this.$router.$avueRouter.getPath({\r\n                name: (itemActive.label || itemActive.name),\r\n                src: itemActive.path\r\n              }, itemActive.meta)\r\n            });\r\n          }*/\r\n\r\n        });\r\n      },\r\n      // 定时检测token\r\n      refreshToken() {\r\n        this.refreshTime = setInterval(() => {\r\n          const token = getStore({\r\n            name: \"token\",\r\n            debug: true\r\n          }) || {};\r\n          const date = calcDate(token.datetime, new Date().getTime());\r\n          if (validatenull(date)) return;\r\n          if (date.seconds >= this.website.tokenTime && !this.refreshLock) {\r\n            this.refreshLock = true;\r\n            this.$store\r\n              .dispatch(\"refreshToken\")\r\n              .then(() => {\r\n                this.refreshLock = false;\r\n              })\r\n              .catch(() => {\r\n                this.refreshLock = false;\r\n              });\r\n          }\r\n        }, 10000);\r\n      }\r\n    }\r\n  };\r\n</script>\r\n"]}]}