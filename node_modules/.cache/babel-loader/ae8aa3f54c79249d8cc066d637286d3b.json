{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js!F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\store\\modules\\logs.js","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\store\\modules\\logs.js","mtime":1592365966736},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport { setStore, getStore } from '@/util/store';\nimport { dateFormat } from '@/util/date';\nimport { sendLogs } from '@/api/user';\nvar logs = {\n  state: {\n    logsList: getStore({\n      name: 'logsList'\n    }) || []\n  },\n  actions: {\n    SendLogs: function SendLogs(_ref) {\n      var state = _ref.state,\n          commit = _ref.commit;\n      return new Promise(function (resolve, reject) {\n        sendLogs(state.logsList).then(function () {\n          commit('CLEAR_LOGS');\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  },\n  mutations: {\n    ADD_LOGS: function ADD_LOGS(state, _ref2) {\n      var type = _ref2.type,\n          message = _ref2.message,\n          stack = _ref2.stack,\n          info = _ref2.info;\n      state.logsList.push(Object.assign({\n        url: window.location.href,\n        time: dateFormat(new Date())\n      }, {\n        type: type,\n        message: message,\n        stack: stack,\n        info: info.toString()\n      }));\n      setStore({\n        name: 'logsList',\n        content: state.logsList\n      });\n    },\n    CLEAR_LOGS: function CLEAR_LOGS(state) {\n      state.logsList = [];\n      setStore({\n        name: 'logsList',\n        content: state.logsList\n      });\n    }\n  }\n};\nexport default logs;",{"version":3,"sources":["F:/A---Spring/bladeX/blade/Saber/src/store/modules/logs.js"],"names":["setStore","getStore","dateFormat","sendLogs","logs","state","logsList","name","actions","SendLogs","commit","Promise","resolve","reject","then","catch","error","mutations","ADD_LOGS","type","message","stack","info","push","Object","assign","url","window","location","href","time","Date","toString","content","CLEAR_LOGS"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,QAAlB,QAAiC,cAAjC;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAEL,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR,IAAgC;AADrC,GADI;AAIXC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QADO,0BACmB;AAAA,UAAhBJ,KAAgB,QAAhBA,KAAgB;AAAA,UAATK,MAAS,QAATA,MAAS;AACxB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCV,QAAAA,QAAQ,CAACE,KAAK,CAACC,QAAP,CAAR,CAAyBQ,IAAzB,CAA8B,YAAM;AAClCJ,UAAAA,MAAM,CAAC,YAAD,CAAN;AACAE,UAAAA,OAAO;AACR,SAHD,EAGGG,KAHH,CAGS,UAAAC,KAAK,EAAI;AAChBH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACD,SALD;AAMD,OAPM,CAAP;AAQD;AAVM,GAJE;AAgBXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE,kBAACb,KAAD,SAAyC;AAAA,UAAhCc,IAAgC,SAAhCA,IAAgC;AAAA,UAA1BC,OAA0B,SAA1BA,OAA0B;AAAA,UAAjBC,KAAiB,SAAjBA,KAAiB;AAAA,UAAVC,IAAU,SAAVA,IAAU;AACjDjB,MAAAA,KAAK,CAACC,QAAN,CAAeiB,IAAf,CAAoBC,MAAM,CAACC,MAAP,CAAc;AAChCC,QAAAA,GAAG,EAAEC,MAAM,CAACC,QAAP,CAAgBC,IADW;AAEhCC,QAAAA,IAAI,EAAE5B,UAAU,CAAC,IAAI6B,IAAJ,EAAD;AAFgB,OAAd,EAGjB;AACDZ,QAAAA,IAAI,EAAJA,IADC;AAEDC,QAAAA,OAAO,EAAPA,OAFC;AAGDC,QAAAA,KAAK,EAALA,KAHC;AAIDC,QAAAA,IAAI,EAAEA,IAAI,CAACU,QAAL;AAJL,OAHiB,CAApB;AASAhC,MAAAA,QAAQ,CAAC;AAACO,QAAAA,IAAI,EAAE,UAAP;AAAmB0B,QAAAA,OAAO,EAAE5B,KAAK,CAACC;AAAlC,OAAD,CAAR;AACD,KAZQ;AAaT4B,IAAAA,UAAU,EAAE,oBAAC7B,KAAD,EAAW;AACrBA,MAAAA,KAAK,CAACC,QAAN,GAAiB,EAAjB;AACAN,MAAAA,QAAQ,CAAC;AAACO,QAAAA,IAAI,EAAE,UAAP;AAAmB0B,QAAAA,OAAO,EAAE5B,KAAK,CAACC;AAAlC,OAAD,CAAR;AACD;AAhBQ;AAhBA,CAAb;AAqCA,eAAeF,IAAf","sourcesContent":["import {setStore, getStore} from '@/util/store'\r\nimport {dateFormat} from '@/util/date'\r\nimport {sendLogs} from '@/api/user'\r\n\r\nconst logs = {\r\n  state: {\r\n    logsList: getStore({name: 'logsList'}) || [],\r\n  },\r\n  actions: {\r\n    SendLogs({state, commit}) {\r\n      return new Promise((resolve, reject) => {\r\n        sendLogs(state.logsList).then(() => {\r\n          commit('CLEAR_LOGS');\r\n          resolve();\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n  },\r\n  mutations: {\r\n    ADD_LOGS: (state, {type, message, stack, info}) => {\r\n      state.logsList.push(Object.assign({\r\n        url: window.location.href,\r\n        time: dateFormat(new Date())\r\n      }, {\r\n        type,\r\n        message,\r\n        stack,\r\n        info: info.toString()\r\n      }))\r\n      setStore({name: 'logsList', content: state.logsList})\r\n    },\r\n    CLEAR_LOGS: (state) => {\r\n      state.logsList = [];\r\n      setStore({name: 'logsList', content: state.logsList})\r\n    }\r\n  }\r\n\r\n};\r\n\r\nexport default logs;\r\n"]}]}