{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js!F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\api\\work\\work.js","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\api\\work\\work.js","mtime":1592365966699},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"F:/A---Spring/bladeX/blade/Saber/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport request from '@/router/axios';\nexport var startList = function startList(current, size, params) {\n  return request({\n    url: '/api/blade-flow/work/start-list',\n    method: 'get',\n    params: _objectSpread(_objectSpread({}, params), {}, {\n      current: current,\n      size: size\n    })\n  });\n};\nexport var claimList = function claimList(current, size, params) {\n  return request({\n    url: '/api/blade-flow/work/claim-list',\n    method: 'get',\n    params: _objectSpread(_objectSpread({}, params), {}, {\n      current: current,\n      size: size\n    })\n  });\n};\nexport var todoList = function todoList(current, size, params) {\n  return request({\n    url: '/api/blade-flow/work/todo-list',\n    method: 'get',\n    params: _objectSpread(_objectSpread({}, params), {}, {\n      current: current,\n      size: size\n    })\n  });\n};\nexport var sendList = function sendList(current, size, params) {\n  return request({\n    url: '/api/blade-flow/work/send-list',\n    method: 'get',\n    params: _objectSpread(_objectSpread({}, params), {}, {\n      current: current,\n      size: size\n    })\n  });\n};\nexport var doneList = function doneList(current, size, params) {\n  return request({\n    url: '/api/blade-flow/work/done-list',\n    method: 'get',\n    params: _objectSpread(_objectSpread({}, params), {}, {\n      current: current,\n      size: size\n    })\n  });\n};\nexport var claimTask = function claimTask(taskId) {\n  return request({\n    url: '/api/blade-flow/work/claim-task',\n    method: 'post',\n    params: {\n      taskId: taskId\n    }\n  });\n};\nexport var completeTask = function completeTask(data) {\n  return request({\n    url: '/api/blade-flow/work/complete-task',\n    method: 'post',\n    data: data\n  });\n};",{"version":3,"sources":["F:/A---Spring/bladeX/blade/Saber/src/api/work/work.js"],"names":["request","startList","current","size","params","url","method","claimList","todoList","sendList","doneList","claimTask","taskId","completeTask","data"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,gBAApB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAUC,IAAV,EAAgBC,MAAhB,EAA2B;AAClD,SAAOJ,OAAO,CAAC;AACbK,IAAAA,GAAG,EAAE,iCADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbF,IAAAA,MAAM,kCACDA,MADC;AAEJF,MAAAA,OAAO,EAAPA,OAFI;AAGJC,MAAAA,IAAI,EAAJA;AAHI;AAHO,GAAD,CAAd;AASD,CAVM;AAYP,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACL,OAAD,EAAUC,IAAV,EAAgBC,MAAhB,EAA2B;AAClD,SAAOJ,OAAO,CAAC;AACbK,IAAAA,GAAG,EAAE,iCADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbF,IAAAA,MAAM,kCACDA,MADC;AAEJF,MAAAA,OAAO,EAAPA,OAFI;AAGJC,MAAAA,IAAI,EAAJA;AAHI;AAHO,GAAD,CAAd;AASD,CAVM;AAYP,OAAO,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACN,OAAD,EAAUC,IAAV,EAAgBC,MAAhB,EAA2B;AACjD,SAAOJ,OAAO,CAAC;AACbK,IAAAA,GAAG,EAAE,gCADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbF,IAAAA,MAAM,kCACDA,MADC;AAEJF,MAAAA,OAAO,EAAPA,OAFI;AAGJC,MAAAA,IAAI,EAAJA;AAHI;AAHO,GAAD,CAAd;AASD,CAVM;AAYP,OAAO,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACP,OAAD,EAAUC,IAAV,EAAgBC,MAAhB,EAA2B;AACjD,SAAOJ,OAAO,CAAC;AACbK,IAAAA,GAAG,EAAE,gCADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbF,IAAAA,MAAM,kCACDA,MADC;AAEJF,MAAAA,OAAO,EAAPA,OAFI;AAGJC,MAAAA,IAAI,EAAJA;AAHI;AAHO,GAAD,CAAd;AASD,CAVM;AAaP,OAAO,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACR,OAAD,EAAUC,IAAV,EAAgBC,MAAhB,EAA2B;AACjD,SAAOJ,OAAO,CAAC;AACbK,IAAAA,GAAG,EAAE,gCADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbF,IAAAA,MAAM,kCACDA,MADC;AAEJF,MAAAA,OAAO,EAAPA,OAFI;AAGJC,MAAAA,IAAI,EAAJA;AAHI;AAHO,GAAD,CAAd;AASD,CAVM;AAYP,OAAO,IAAMQ,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAAY;AACnC,SAAOZ,OAAO,CAAC;AACbK,IAAAA,GAAG,EAAE,iCADQ;AAEbC,IAAAA,MAAM,EAAE,MAFK;AAGbF,IAAAA,MAAM,EAAE;AACNQ,MAAAA,MAAM,EAANA;AADM;AAHK,GAAD,CAAd;AAOD,CARM;AAWP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AACpC,SAAOd,OAAO,CAAC;AACbK,IAAAA,GAAG,EAAE,oCADQ;AAEbC,IAAAA,MAAM,EAAE,MAFK;AAGbQ,IAAAA,IAAI,EAAJA;AAHa,GAAD,CAAd;AAKD,CANM","sourcesContent":["import request from '@/router/axios';\r\n\r\nexport const startList = (current, size, params) => {\r\n  return request({\r\n    url: '/api/blade-flow/work/start-list',\r\n    method: 'get',\r\n    params: {\r\n      ...params,\r\n      current,\r\n      size,\r\n    }\r\n  })\r\n}\r\n\r\nexport const claimList = (current, size, params) => {\r\n  return request({\r\n    url: '/api/blade-flow/work/claim-list',\r\n    method: 'get',\r\n    params: {\r\n      ...params,\r\n      current,\r\n      size,\r\n    }\r\n  })\r\n}\r\n\r\nexport const todoList = (current, size, params) => {\r\n  return request({\r\n    url: '/api/blade-flow/work/todo-list',\r\n    method: 'get',\r\n    params: {\r\n      ...params,\r\n      current,\r\n      size,\r\n    }\r\n  })\r\n}\r\n\r\nexport const sendList = (current, size, params) => {\r\n  return request({\r\n    url: '/api/blade-flow/work/send-list',\r\n    method: 'get',\r\n    params: {\r\n      ...params,\r\n      current,\r\n      size,\r\n    }\r\n  })\r\n}\r\n\r\n\r\nexport const doneList = (current, size, params) => {\r\n  return request({\r\n    url: '/api/blade-flow/work/done-list',\r\n    method: 'get',\r\n    params: {\r\n      ...params,\r\n      current,\r\n      size,\r\n    }\r\n  })\r\n}\r\n\r\nexport const claimTask = (taskId) => {\r\n  return request({\r\n    url: '/api/blade-flow/work/claim-task',\r\n    method: 'post',\r\n    params: {\r\n      taskId\r\n    }\r\n  })\r\n}\r\n\r\n\r\nexport const completeTask = (data) => {\r\n  return request({\r\n    url: '/api/blade-flow/work/complete-task',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n"]}]}