{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js!F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\router\\avue-router.js","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\router\\avue-router.js","mtime":1592365966731},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _typeof from \"F:/A---Spring/bladeX/blade/Saber/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\nvar RouterPlugin = function RouterPlugin() {\n  this.$router = null;\n  this.$store = null;\n};\n\nRouterPlugin.install = function (vue, router, store, i18n) {\n  var _this = this;\n\n  this.$router = router;\n  this.$store = store;\n  this.$vue = new vue({\n    i18n: i18n\n  }); // 这个的作用是 为了检查出网页链接，因为本项目用到了 iframe\n\n  function isURL(s) {\n    if (s.includes('html')) return true;\n    return /^http[s]?:\\/\\/.*/.test(s);\n  } // 将参数处理为参数的形式拼接\n\n\n  function objToform(obj) {\n    var result = [];\n    Object.keys(obj).forEach(function (ele) {\n      result.push(\"\".concat(ele, \"=\").concat(obj[ele]));\n    });\n    return result.join('&');\n  }\n\n  this.$router.$avueRouter = {\n    //全局配置\n    $website: this.$store.getters.website,\n    routerList: [],\n    group: '',\n    meta: {},\n    safe: this,\n    // 设置标题\n    setTitle: function setTitle(title) {\n      var defaultTitle = _this.$vue.$t('title');\n\n      title = title ? \"\".concat(title, \"-\").concat(defaultTitle) : defaultTitle;\n      document.title = title;\n    },\n    closeTag: function closeTag(value) {\n      var tag = value || _this.$store.getters.tag;\n\n      if (typeof value === 'string') {\n        tag = _this.$store.getters.tagList.filter(function (ele) {\n          return ele.value === value;\n        })[0];\n      }\n\n      _this.$store.commit('DEL_TAG', tag);\n    },\n    generateTitle: function generateTitle(title, key) {\n      if (!key) return title;\n\n      var hasKey = _this.$vue.$te('route.' + key);\n\n      if (hasKey) {\n        // $t :this method from vue-i18n, inject in @/lang/index.js\n        var translatedTitle = _this.$vue.$t('route.' + key);\n\n        return translatedTitle;\n      }\n\n      return title;\n    },\n    //处理路由\n    getPath: function getPath(params) {\n      var src = params.src;\n      var result = src || '/';\n\n      if (isURL(src)) {\n        result = \"/myiframe/urlPath?\".concat(objToform(params));\n      }\n\n      return result;\n    },\n    //正则处理路由\n    vaildPath: function vaildPath(list, path) {\n      var result = false;\n      list.forEach(function (ele) {\n        if (new RegExp(\"^\" + ele + \".*\", \"g\").test(path)) {\n          result = true;\n        }\n      });\n      return result;\n    },\n    //设置路由值\n    getValue: function getValue(route) {\n      var value = \"\";\n\n      if (route.query.src) {\n        value = route.query.src;\n      } else {\n        value = route.path;\n      }\n\n      return value;\n    },\n    //动态路由\n    // 路由是专门的一个接口获取\n\n    /**\r\n     * aMenu: 接受到的动态路由数据 menu的结构外层有父级path 里面有一个childen 记录页面的路由\r\n     * first: 为了区分外界 调用formatRoutes 和 当前文件调用 formatRoutes\r\n    */\n    formatRoutes: function formatRoutes() {\n      var _this2 = this;\n\n      var aMenu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var first = arguments.length > 1 ? arguments[1] : undefined;\n      // window.console.log('aMenu')\n      // window.console.log(aMenu)\n      var aRouter = []; // 获取到全局配置中的 props\n\n      var propsConfig = this.$website.menu.props; // 设置 props默认值 作用就是将字段设置成配置的\n\n      var propsDefault = {\n        label: propsConfig.label || 'name',\n        path: propsConfig.path || 'path',\n        icon: propsConfig.icon || 'icon',\n        children: propsConfig.children || 'children',\n        meta: propsConfig.meta || 'meta'\n      }; // 如果没有权限菜单就结束\n\n      if (aMenu.length === 0) return; // 开始处理menu\n\n      var _loop = function _loop(i) {\n        // 取到当前要处理的一项\n        var oMenu = aMenu[i]; // 判断this.routerList中是否已经存在该path，存在就跳出\n\n        if (_this2.routerList.includes(oMenu[propsDefault.path])) return {\n          v: void 0\n        }; // 这一块的赋值 也就是取到返回的值\n\n        var path = function () {\n          if (first) {\n            // 将 '/index' 替换为 ''\n            return oMenu[propsDefault.path].replace('/index', '');\n          } else {\n            return oMenu[propsDefault.path];\n          }\n        }(),\n            //特殊处理组件 执行完这个 component 也就是精确到具体的文件了  views文件夹下面就是具体的页面代码\n        _component = 'views' + oMenu.path,\n            name = oMenu[propsDefault.label],\n            icon = oMenu[propsDefault.icon],\n            children = oMenu[propsDefault.children],\n            meta = oMenu[propsDefault.meta] || {}; // meta中 keepalive 的处理\n\n\n        meta = Object.assign(meta, function () {\n          if (meta.keepAlive === true) {\n            return {\n              $keepAlive: true\n            };\n          }\n        }()); //是否有子路由\n\n        var isChild = children.length !== 0;\n        var oRouter = {\n          path: path,\n          component: function component(resolve) {\n            // 判断是否为首路由\n            if (first) {\n              require(['../page/index'], resolve);\n\n              return; // 判断是否为多层路由\n            } else if (isChild && !first) {\n              require(['../page/index/layout'], resolve);\n\n              return; // 判断是否为最终的页面视图\n            } else {\n              require([\"../\".concat(_component, \".vue\")], resolve);\n            }\n          },\n          name: name,\n          icon: icon,\n          meta: meta,\n          redirect: function () {\n            // 第一次进来但是没有子路由的 需要添加redirect\n            if (!isChild && first && !isURL(path)) return \"\".concat(path, \"/index\");else return '';\n          }(),\n          // 整理子路由的route 配置\n          // 处理是否为一级路由\n          children: !isChild ? function () {\n            if (first) {\n              // 这里的isURL判断，因为这个网站有使用 iframe。所以需要判断是否为网页链接\n              if (!isURL(path)) oMenu[propsDefault.path] = \"\".concat(path, \"/index\");\n              return [{\n                component: function component(resolve) {\n                  require([\"../\".concat(_component, \".vue\")], resolve);\n                },\n                icon: icon,\n                name: name,\n                meta: meta,\n                path: 'index'\n              }];\n            }\n\n            return [];\n          }() : function () {\n            /**\r\n             * 这里是重点，当有子路由的时候 会再去执行 formatRoutes 方法，然后又会有一个新的 aMenu for循环。\r\n             * 最后返回的是一个数组 aRouter 这个数组就会作为 childen的值被 return\r\n            */\n            return _this2.formatRoutes(children, false);\n          }()\n        };\n        aRouter.push(oRouter);\n      };\n\n      for (var i = 0; i < aMenu.length; i++) {\n        var _ret = _loop(i);\n\n        if (_typeof(_ret) === \"object\") return _ret.v;\n      } // for循环结束\n      // 这个first 卡的其实就是首路由\n\n\n      if (first) {\n        window.console.log(aRouter);\n\n        if (!this.routerList.includes(aRouter[0][propsDefault.path])) {\n          this.safe.$router.addRoutes(aRouter);\n          this.routerList.push(aRouter[0][propsDefault.path]);\n        }\n      } else {\n        // 这里返回的是子组件\n        return aRouter;\n      }\n    }\n  };\n};\n\nexport default RouterPlugin;",{"version":3,"sources":["F:/A---Spring/bladeX/blade/Saber/src/router/avue-router.js"],"names":["RouterPlugin","$router","$store","install","vue","router","store","i18n","$vue","isURL","s","includes","test","objToform","obj","result","Object","keys","forEach","ele","push","join","$avueRouter","$website","getters","website","routerList","group","meta","safe","setTitle","title","defaultTitle","$t","document","closeTag","value","tag","tagList","filter","commit","generateTitle","key","hasKey","$te","translatedTitle","getPath","params","src","vaildPath","list","path","RegExp","getValue","route","query","formatRoutes","aMenu","first","aRouter","propsConfig","menu","props","propsDefault","label","icon","children","length","i","oMenu","replace","component","name","assign","keepAlive","$keepAlive","isChild","oRouter","resolve","require","redirect","window","console","log","addRoutes"],"mappings":"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","sourcesContent":["let RouterPlugin = function () {\r\n  this.$router = null;\r\n  this.$store = null;\r\n\r\n};\r\nRouterPlugin.install = function (vue, router, store, i18n) {\r\n  this.$router = router;\r\n  this.$store = store;\r\n  this.$vue = new vue({i18n});\r\n\r\n  // 这个的作用是 为了检查出网页链接，因为本项目用到了 iframe\r\n  function isURL(s) {\r\n    if (s.includes('html')) return true;\r\n    return /^http[s]?:\\/\\/.*/.test(s)\r\n  }\r\n\r\n  // 将参数处理为参数的形式拼接\r\n  function objToform(obj) {\r\n    let result = [];\r\n    Object.keys(obj).forEach(ele => {\r\n      result.push(`${ele}=${obj[ele]}`);\r\n    })\r\n    return result.join('&');\r\n  }\r\n\r\n  this.$router.$avueRouter = {\r\n    //全局配置\r\n    $website: this.$store.getters.website,\r\n    routerList: [],\r\n    group: '',\r\n    meta: {},\r\n    safe: this,\r\n    // 设置标题\r\n    setTitle: (title) => {\r\n      const defaultTitle = this.$vue.$t('title');\r\n      title = title ? `${title}-${defaultTitle}` : defaultTitle;\r\n      document.title = title;\r\n    },\r\n    closeTag: (value) => {\r\n      let tag = value || this.$store.getters.tag;\r\n      if (typeof value === 'string') {\r\n        tag = this.$store.getters.tagList.filter(ele => ele.value === value)[0]\r\n      }\r\n      this.$store.commit('DEL_TAG', tag)\r\n    },\r\n    generateTitle: (title, key) => {\r\n      if (!key) return title;\r\n      const hasKey = this.$vue.$te('route.' + key)\r\n      if (hasKey) {\r\n        // $t :this method from vue-i18n, inject in @/lang/index.js\r\n        const translatedTitle = this.$vue.$t('route.' + key)\r\n\r\n        return translatedTitle\r\n      }\r\n      return title\r\n    },\r\n    //处理路由\r\n    getPath: function (params) {\r\n      let {src} = params;\r\n      let result = src || '/';\r\n      if (isURL(src)) {\r\n        result = `/myiframe/urlPath?${objToform(params)}`;\r\n      }\r\n      return result;\r\n    },\r\n    //正则处理路由\r\n    vaildPath: function (list, path) {\r\n      let result = false;\r\n      list.forEach(ele => {\r\n        if (new RegExp(\"^\" + ele + \".*\", \"g\").test(path)) {\r\n          result = true\r\n        }\r\n\r\n      })\r\n      return result;\r\n    },\r\n    //设置路由值\r\n    getValue: function (route) {\r\n      let value = \"\";\r\n      if (route.query.src) {\r\n        value = route.query.src;\r\n      } else {\r\n        value = route.path;\r\n      }\r\n      return value;\r\n    },\r\n    //动态路由\r\n    // 路由是专门的一个接口获取\r\n      /**\r\n       * aMenu: 接受到的动态路由数据 menu的结构外层有父级path 里面有一个childen 记录页面的路由\r\n       * first: 为了区分外界 调用formatRoutes 和 当前文件调用 formatRoutes\r\n      */\r\n    formatRoutes: function (aMenu = [], first) {\r\n      // window.console.log('aMenu')\r\n      // window.console.log(aMenu)\r\n      const aRouter = []\r\n      // 获取到全局配置中的 props\r\n      const propsConfig = this.$website.menu.props;\r\n      // 设置 props默认值 作用就是将字段设置成配置的\r\n      const propsDefault = {\r\n        label: propsConfig.label || 'name',\r\n        path: propsConfig.path || 'path',\r\n        icon: propsConfig.icon || 'icon',\r\n        children: propsConfig.children || 'children',\r\n        meta: propsConfig.meta || 'meta',\r\n      }\r\n      // 如果没有权限菜单就结束\r\n      if (aMenu.length === 0) return;\r\n      // 开始处理menu\r\n      for (let i = 0; i < aMenu.length; i++) {\r\n        // 取到当前要处理的一项\r\n        const oMenu = aMenu[i];\r\n        // 判断this.routerList中是否已经存在该path，存在就跳出\r\n        if (this.routerList.includes(oMenu[propsDefault.path])) return;\r\n        // 这一块的赋值 也就是取到返回的值\r\n        let path = (() => {\r\n            if (first) {\r\n              // 将 '/index' 替换为 ''\r\n              return oMenu[propsDefault.path].replace('/index', '')\r\n            } else {\r\n              return oMenu[propsDefault.path]\r\n            }\r\n          })(),\r\n          //特殊处理组件 执行完这个 component 也就是精确到具体的文件了  views文件夹下面就是具体的页面代码\r\n          component = 'views' + oMenu.path,\r\n          name = oMenu[propsDefault.label],\r\n          icon = oMenu[propsDefault.icon],\r\n          children = oMenu[propsDefault.children],\r\n          meta = oMenu[propsDefault.meta] || {};\r\n          // meta中 keepalive 的处理\r\n        meta = Object.assign(meta, (function () {\r\n          if (meta.keepAlive === true) {\r\n            return {\r\n              $keepAlive: true\r\n            }\r\n          }\r\n        })());\r\n        //是否有子路由\r\n        const isChild = children.length !== 0;\r\n        const oRouter = {\r\n          path: path,\r\n          component(resolve) {\r\n            // 判断是否为首路由\r\n            if (first) {\r\n              require(['../page/index'], resolve)\r\n              return\r\n              // 判断是否为多层路由\r\n            } else if (isChild && !first) {\r\n              require(['../page/index/layout'], resolve)\r\n              return\r\n              // 判断是否为最终的页面视图\r\n            } else {\r\n              require([`../${component}.vue`], resolve)\r\n            }\r\n          },\r\n          name: name,\r\n          icon: icon,\r\n          meta: meta,\r\n          redirect: (() => {\r\n            // 第一次进来但是没有子路由的 需要添加redirect\r\n            if (!isChild && first && !isURL(path)) return `${path}/index`\r\n            else return '';\r\n          })(),\r\n          // 整理子路由的route 配置\r\n          // 处理是否为一级路由\r\n          children: !isChild ? (() => {\r\n            if (first) {\r\n              // 这里的isURL判断，因为这个网站有使用 iframe。所以需要判断是否为网页链接\r\n              if (!isURL(path)) oMenu[propsDefault.path] = `${path}/index`;\r\n              return [{\r\n                component(resolve) {\r\n                  require([`../${component}.vue`], resolve)\r\n                },\r\n                icon: icon,\r\n                name: name,\r\n                meta: meta,\r\n                path: 'index'\r\n              }]\r\n            }\r\n            return [];\r\n          })() : (() => {\r\n            /**\r\n             * 这里是重点，当有子路由的时候 会再去执行 formatRoutes 方法，然后又会有一个新的 aMenu for循环。\r\n             * 最后返回的是一个数组 aRouter 这个数组就会作为 childen的值被 return\r\n            */\r\n            return this.formatRoutes(children, false)\r\n          })()\r\n        }\r\n        aRouter.push(oRouter)\r\n      }\r\n      // for循环结束\r\n      // 这个first 卡的其实就是首路由\r\n      if (first) {\r\n        window.console.log(aRouter)\r\n        if (!this.routerList.includes(aRouter[0][propsDefault.path])) {\r\n          this.safe.$router.addRoutes(aRouter)\r\n          this.routerList.push(aRouter[0][propsDefault.path])\r\n        }\r\n      } else {\r\n        // 这里返回的是子组件\r\n        return aRouter\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default RouterPlugin;\r\n"]}]}