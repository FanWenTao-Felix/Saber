{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js!F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\api\\user.js","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\api\\user.js","mtime":1592365966697},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport request from '@/router/axios';\nimport website from \"@/config/website\";\nexport var loginByUsername = function loginByUsername(tenantId, username, password, type, key, code) {\n  return request({\n    url: '/api/blade-auth/oauth/token',\n    method: 'post',\n    headers: {\n      'Tenant-Id': tenantId,\n      'Captcha-Key': key,\n      'Captcha-Code': code\n    },\n    params: {\n      tenantId: tenantId,\n      username: username,\n      password: password,\n      grant_type: website.captchaMode ? \"captcha\" : \"password\",\n      scope: \"all\",\n      type: type\n    }\n  });\n};\nexport var loginBySocial = function loginBySocial(tenantId, source, code, state) {\n  return request({\n    url: '/api/blade-auth/oauth/token',\n    method: 'post',\n    headers: {\n      'Tenant-Id': tenantId\n    },\n    params: {\n      tenantId: tenantId,\n      source: source,\n      code: code,\n      state: state,\n      grant_type: \"social\",\n      scope: \"all\"\n    }\n  });\n};\nexport var refreshToken = function refreshToken(refresh_token, tenantId) {\n  return request({\n    url: '/api/blade-auth/oauth/token',\n    method: 'post',\n    headers: {\n      'Tenant-Id': tenantId\n    },\n    params: {\n      tenantId: tenantId,\n      refresh_token: refresh_token,\n      grant_type: \"refresh_token\",\n      scope: \"all\"\n    }\n  });\n};\nexport var registerGuest = function registerGuest(form, oauthId) {\n  return request({\n    url: '/api/blade-user/register-guest',\n    method: 'post',\n    params: {\n      tenantId: form.tenantId,\n      name: form.name,\n      account: form.account,\n      password: form.password,\n      oauthId: oauthId\n    }\n  });\n};\nexport var getButtons = function getButtons() {\n  return request({\n    url: '/api/blade-system/menu/buttons',\n    method: 'get'\n  });\n};\nexport var getCaptcha = function getCaptcha() {\n  return request({\n    url: '/api/blade-auth/oauth/captcha',\n    method: 'get'\n  });\n};\nexport var logout = function logout() {\n  return request({\n    url: '/api/blade-auth/oauth/logout',\n    method: 'get'\n  });\n};\nexport var getUserInfo = function getUserInfo() {\n  return request({\n    url: '/api/blade-auth/oauth/user-info',\n    method: 'get'\n  });\n};\nexport var sendLogs = function sendLogs(list) {\n  return request({\n    url: '/api/blade-auth/oauth/logout',\n    method: 'post',\n    data: list\n  });\n};\nexport var clearCache = function clearCache() {\n  return request({\n    url: '/api/blade-auth/oauth/clear-cache',\n    method: 'get'\n  });\n};",{"version":3,"sources":["F:/A---Spring/bladeX/blade/Saber/src/api/user.js"],"names":["request","website","loginByUsername","tenantId","username","password","type","key","code","url","method","headers","params","grant_type","captchaMode","scope","loginBySocial","source","state","refreshToken","refresh_token","registerGuest","form","oauthId","name","account","getButtons","getCaptcha","logout","getUserInfo","sendLogs","list","data","clearCache"],"mappings":"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","sourcesContent":["import request from '@/router/axios';\r\nimport website from \"@/config/website\";\r\n\r\nexport const loginByUsername = (tenantId, username, password, type, key, code) => request({\r\n  url: '/api/blade-auth/oauth/token',\r\n  method: 'post',\r\n  headers: {\r\n    'Tenant-Id': tenantId,\r\n    'Captcha-Key': key,\r\n    'Captcha-Code': code,\r\n  },\r\n  params: {\r\n    tenantId,\r\n    username,\r\n    password,\r\n    grant_type: (website.captchaMode ? \"captcha\" : \"password\"),\r\n    scope: \"all\",\r\n    type\r\n  }\r\n});\r\n\r\nexport const loginBySocial = (tenantId, source, code, state) => request({\r\n  url: '/api/blade-auth/oauth/token',\r\n  method: 'post',\r\n  headers: {\r\n    'Tenant-Id': tenantId\r\n  },\r\n  params: {\r\n    tenantId,\r\n    source,\r\n    code,\r\n    state,\r\n    grant_type: \"social\",\r\n    scope: \"all\",\r\n  }\r\n})\r\n\r\nexport const refreshToken = (refresh_token, tenantId) => request({\r\n  url: '/api/blade-auth/oauth/token',\r\n  method: 'post',\r\n  headers: {\r\n    'Tenant-Id': tenantId\r\n  },\r\n  params: {\r\n    tenantId,\r\n    refresh_token,\r\n    grant_type: \"refresh_token\",\r\n    scope: \"all\",\r\n  }\r\n});\r\n\r\nexport const registerGuest = (form, oauthId) => request({\r\n  url: '/api/blade-user/register-guest',\r\n  method: 'post',\r\n  params: {\r\n    tenantId: form.tenantId,\r\n    name: form.name,\r\n    account: form.account,\r\n    password: form.password,\r\n    oauthId\r\n  }\r\n});\r\n\r\nexport const getButtons = () => request({\r\n  url: '/api/blade-system/menu/buttons',\r\n  method: 'get'\r\n});\r\n\r\nexport const getCaptcha = () => request({\r\n  url: '/api/blade-auth/oauth/captcha',\r\n  method: 'get'\r\n});\r\n\r\nexport const logout = () => request({\r\n  url: '/api/blade-auth/oauth/logout',\r\n  method: 'get'\r\n});\r\n\r\nexport const getUserInfo = () => request({\r\n  url: '/api/blade-auth/oauth/user-info',\r\n  method: 'get'\r\n});\r\n\r\nexport const sendLogs = (list) => request({\r\n  url: '/api/blade-auth/oauth/logout',\r\n  method: 'post',\r\n  data: list\r\n});\r\n\r\nexport const clearCache = () => request({\r\n  url: '/api/blade-auth/oauth/clear-cache',\r\n  method: 'get'\r\n});\r\n"]}]}