{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js!F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\mock\\param.js","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\mock\\param.js","mtime":1592365966716},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Mock from 'mockjs';\n\nfunction getFakeList() {\n  var json = {\n    code: 200,\n    success: true,\n    msg: '操作成功'\n  };\n  var list = [];\n  list.push({\n    id: '1',\n    paramName: '是否开启注册功能--mock测试',\n    paramKey: 'account.registerUser',\n    paramValue: 'true',\n    remark: '描述'\n  }, {\n    id: '2',\n    paramName: '账号初始密码--mock测试',\n    paramKey: 'account.initPassword',\n    paramValue: '123456',\n    remark: '描述'\n  });\n  json.data = {\n    total: 10,\n    size: 10,\n    current: 1,\n    searchCount: true,\n    pages: 1,\n    records: list\n  };\n  return json;\n}\n\nfunction getFakeDetail() {\n  var json = {\n    code: 200,\n    success: true,\n    msg: '操作成功'\n  };\n  json.data = {\n    id: '1',\n    paramName: '是否开启注册功能',\n    paramKey: 'account.registerUser',\n    paramValue: 'true',\n    remark: '描述'\n  };\n  return json;\n}\n\nfunction fakeSuccess() {\n  return {\n    code: 200,\n    success: true,\n    msg: '操作成功'\n  };\n}\n\nexport default (function (_ref) {\n  var mock = _ref.mock;\n  if (!mock) return;\n  Mock.mock(/\\/api\\/blade-system\\/param\\/list/, 'get', getFakeList);\n  Mock.mock(/\\/api\\/blade-system\\/param\\/detail/, 'get', getFakeDetail);\n  Mock.mock(/\\/api\\/blade-system\\/param\\/submit/, 'post', fakeSuccess);\n  Mock.mock(/\\/api\\/blade-system\\/param\\/remove/, 'post', fakeSuccess);\n});",{"version":3,"sources":["F:/A---Spring/bladeX/blade/Saber/src/mock/param.js"],"names":["Mock","getFakeList","json","code","success","msg","list","push","id","paramName","paramKey","paramValue","remark","data","total","size","current","searchCount","pages","records","getFakeDetail","fakeSuccess","mock"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEA,SAASC,WAAT,GAAuB;AACrB,MAAMC,IAAI,GAAG;AAACC,IAAAA,IAAI,EAAE,GAAP;AAAYC,IAAAA,OAAO,EAAE,IAArB;AAA2BC,IAAAA,GAAG,EAAE;AAAhC,GAAb;AACA,MAAMC,IAAI,GAAG,EAAb;AACAA,EAAAA,IAAI,CAACC,IAAL,CACE;AACEC,IAAAA,EAAE,EAAE,GADN;AAEEC,IAAAA,SAAS,EAAE,kBAFb;AAGEC,IAAAA,QAAQ,EAAE,sBAHZ;AAIEC,IAAAA,UAAU,EAAE,MAJd;AAKEC,IAAAA,MAAM,EAAE;AALV,GADF,EAQE;AACEJ,IAAAA,EAAE,EAAE,GADN;AAEEC,IAAAA,SAAS,EAAE,gBAFb;AAGEC,IAAAA,QAAQ,EAAE,sBAHZ;AAIEC,IAAAA,UAAU,EAAE,QAJd;AAKEC,IAAAA,MAAM,EAAE;AALV,GARF;AAgBAV,EAAAA,IAAI,CAACW,IAAL,GAAY;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,IAAI,EAAE,EAFI;AAGVC,IAAAA,OAAO,EAAE,CAHC;AAIVC,IAAAA,WAAW,EAAE,IAJH;AAKVC,IAAAA,KAAK,EAAE,CALG;AAMVC,IAAAA,OAAO,EAAEb;AANC,GAAZ;AAQA,SAAOJ,IAAP;AACD;;AAED,SAASkB,aAAT,GAAyB;AACvB,MAAMlB,IAAI,GAAG;AAACC,IAAAA,IAAI,EAAE,GAAP;AAAYC,IAAAA,OAAO,EAAE,IAArB;AAA2BC,IAAAA,GAAG,EAAE;AAAhC,GAAb;AACAH,EAAAA,IAAI,CAACW,IAAL,GAAY;AACVL,IAAAA,EAAE,EAAE,GADM;AAEVC,IAAAA,SAAS,EAAE,UAFD;AAGVC,IAAAA,QAAQ,EAAE,sBAHA;AAIVC,IAAAA,UAAU,EAAE,MAJF;AAKVC,IAAAA,MAAM,EAAE;AALE,GAAZ;AAOA,SAAOV,IAAP;AACD;;AAED,SAASmB,WAAT,GAAuB;AACrB,SAAO;AAAClB,IAAAA,IAAI,EAAE,GAAP;AAAYC,IAAAA,OAAO,EAAE,IAArB;AAA2BC,IAAAA,GAAG,EAAE;AAAhC,GAAP;AACD;;AAED,gBAAe,gBAAY;AAAA,MAAViB,IAAU,QAAVA,IAAU;AACzB,MAAI,CAACA,IAAL,EAAW;AACXtB,EAAAA,IAAI,CAACsB,IAAL,CAAU,kCAAV,EAA8C,KAA9C,EAAqDrB,WAArD;AAEAD,EAAAA,IAAI,CAACsB,IAAL,CAAU,oCAAV,EAAgD,KAAhD,EAAuDF,aAAvD;AAEApB,EAAAA,IAAI,CAACsB,IAAL,CAAU,oCAAV,EAAgD,MAAhD,EAAwDD,WAAxD;AAEArB,EAAAA,IAAI,CAACsB,IAAL,CAAU,oCAAV,EAAgD,MAAhD,EAAwDD,WAAxD;AAED,CAVD","sourcesContent":["import Mock from 'mockjs'\r\n\r\nfunction getFakeList() {\r\n  const json = {code: 200, success: true, msg: '操作成功'};\r\n  const list = [];\r\n  list.push(\r\n    {\r\n      id: '1',\r\n      paramName: '是否开启注册功能--mock测试',\r\n      paramKey: 'account.registerUser',\r\n      paramValue: 'true',\r\n      remark: '描述',\r\n    },\r\n    {\r\n      id: '2',\r\n      paramName: '账号初始密码--mock测试',\r\n      paramKey: 'account.initPassword',\r\n      paramValue: '123456',\r\n      remark: '描述',\r\n    }\r\n  );\r\n  json.data = {\r\n    total: 10,\r\n    size: 10,\r\n    current: 1,\r\n    searchCount: true,\r\n    pages: 1,\r\n    records: list,\r\n  };\r\n  return json;\r\n}\r\n\r\nfunction getFakeDetail() {\r\n  const json = {code: 200, success: true, msg: '操作成功'};\r\n  json.data = {\r\n    id: '1',\r\n    paramName: '是否开启注册功能',\r\n    paramKey: 'account.registerUser',\r\n    paramValue: 'true',\r\n    remark: '描述',\r\n  };\r\n  return json;\r\n}\r\n\r\nfunction fakeSuccess() {\r\n  return {code: 200, success: true, msg: '操作成功'};\r\n}\r\n\r\nexport default ({mock}) => {\r\n  if (!mock) return;\r\n  Mock.mock(/\\/api\\/blade-system\\/param\\/list/, 'get', getFakeList);\r\n\r\n  Mock.mock(/\\/api\\/blade-system\\/param\\/detail/, 'get', getFakeDetail);\r\n\r\n  Mock.mock(/\\/api\\/blade-system\\/param\\/submit/, 'post', fakeSuccess);\r\n\r\n  Mock.mock(/\\/api\\/blade-system\\/param\\/remove/, 'post', fakeSuccess);\r\n\r\n}\r\n"]}]}