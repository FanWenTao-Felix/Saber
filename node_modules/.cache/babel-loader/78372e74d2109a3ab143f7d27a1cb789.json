{"remainingRequest":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js!F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\A---Spring\\bladeX\\blade\\Saber\\src\\store\\modules\\dict.js","dependencies":[{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\src\\store\\modules\\dict.js","mtime":1592365966736},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\A---Spring\\bladeX\\blade\\Saber\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.map\";\nimport { getStore, setStore } from '@/util/store';\nimport { getDictionary } from '@/api/system/dict';\nvar dict = {\n  state: {\n    flowRoutes: getStore({\n      name: 'flowRoutes'\n    }) || {}\n  },\n  actions: {\n    //发送错误日志\n    FlowRoutes: function FlowRoutes(_ref) {\n      var commit = _ref.commit;\n      return new Promise(function (resolve, reject) {\n        getDictionary({\n          code: 'flow'\n        }).then(function (res) {\n          commit('SET_FLOW_ROUTES', res.data.data);\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  },\n  mutations: {\n    SET_FLOW_ROUTES: function SET_FLOW_ROUTES(state, data) {\n      state.flowRoutes = data.map(function (item) {\n        return {\n          routeKey: \"\".concat(item.code, \"_\").concat(item.dictKey),\n          routeValue: item.remark\n        };\n      });\n      setStore({\n        name: 'flowRoutes',\n        content: state.flowRoutes\n      });\n    }\n  }\n};\nexport default dict;",{"version":3,"sources":["F:/A---Spring/bladeX/blade/Saber/src/store/modules/dict.js"],"names":["getStore","setStore","getDictionary","dict","state","flowRoutes","name","actions","FlowRoutes","commit","Promise","resolve","reject","code","then","res","data","catch","error","mutations","SET_FLOW_ROUTES","map","item","routeKey","dictKey","routeValue","remark","content"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,QAAlB,QAAiC,cAAjC;AAEA,SAAQC,aAAR,QAA4B,mBAA5B;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAEL,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR,IAAkC;AADzC,GADI;AAIXC,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,UAFO,4BAEc;AAAA,UAATC,MAAS,QAATA,MAAS;AACnB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCV,QAAAA,aAAa,CAAC;AAACW,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAb,CAA8BC,IAA9B,CAAmC,UAAAC,GAAG,EAAI;AACxCN,UAAAA,MAAM,CAAC,iBAAD,EAAoBM,GAAG,CAACC,IAAJ,CAASA,IAA7B,CAAN;AACAL,UAAAA,OAAO;AACR,SAHD,EAGGM,KAHH,CAGS,UAAAC,KAAK,EAAI;AAChBN,UAAAA,MAAM,CAACM,KAAD,CAAN;AACD,SALD;AAMD,OAPM,CAAP;AAQD;AAXM,GAJE;AAiBXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,eAAe,EAAE,yBAAChB,KAAD,EAAQY,IAAR,EAAiB;AAChCZ,MAAAA,KAAK,CAACC,UAAN,GAAmBW,IAAI,CAACK,GAAL,CAAS,UAAAC,IAAI,EAAI;AAClC,eAAO;AACLC,UAAAA,QAAQ,YAAKD,IAAI,CAACT,IAAV,cAAkBS,IAAI,CAACE,OAAvB,CADH;AAELC,UAAAA,UAAU,EAAEH,IAAI,CAACI;AAFZ,SAAP;AAID,OALkB,CAAnB;AAMAzB,MAAAA,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAAE,YAAP;AAAqBqB,QAAAA,OAAO,EAAEvB,KAAK,CAACC;AAApC,OAAD,CAAR;AACD;AATQ;AAjBA,CAAb;AA+BA,eAAeF,IAAf","sourcesContent":["import {getStore, setStore} from '@/util/store'\r\n\r\nimport {getDictionary} from '@/api/system/dict'\r\n\r\nconst dict = {\r\n  state: {\r\n    flowRoutes: getStore({name: 'flowRoutes'}) || {},\r\n  },\r\n  actions: {\r\n    //发送错误日志\r\n    FlowRoutes({commit}) {\r\n      return new Promise((resolve, reject) => {\r\n        getDictionary({code: 'flow'}).then(res => {\r\n          commit('SET_FLOW_ROUTES', res.data.data);\r\n          resolve();\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n  },\r\n  mutations: {\r\n    SET_FLOW_ROUTES: (state, data) => {\r\n      state.flowRoutes = data.map(item => {\r\n        return {\r\n          routeKey: `${item.code}_${item.dictKey}`,\r\n          routeValue: item.remark,\r\n        };\r\n      });\r\n      setStore({name: 'flowRoutes', content: state.flowRoutes})\r\n    },\r\n  }\r\n\r\n};\r\n\r\nexport default dict;\r\n"]}]}